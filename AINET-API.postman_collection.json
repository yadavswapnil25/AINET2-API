{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "AINET API Collection",
		"description": "API collection for AINET PPF and DRF form submissions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PPF (Paper Presentation Form)",
			"item": [
				{
					"name": "Submit PPF - API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains ID', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"});",
									"",
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"main_title\": \"Dr.\",\n    \"main_name\": \"John Doe\",\n    \"main_work\": \"University of Technology\",\n    \"presenter_main_country_code\": \"+91\",\n    \"main_phone\": \"9876543210\",\n    \"presenter_main_email\": \"john.doe@university.edu\",\n    \"pr_area\": \"Artificial Intelligence\",\n    \"pr_area_specify\": \"Machine Learning in Healthcare\",\n    \"pr_nature\": \"Research Paper\",\n    \"pr_abstract\": \"This paper presents a novel approach to machine learning applications in healthcare, focusing on early disease detection and treatment optimization.\",\n    \"presenter_bio\": \"Dr. John Doe is a renowned researcher in AI and healthcare with over 10 years of experience.\",\n    \"pr_title\": \"AI-Driven Healthcare: A Revolutionary Approach\",\n    \"co1_title\": \"Prof.\",\n    \"co1_name\": \"Jane Smith\",\n    \"co1_work\": \"Medical Research Institute\",\n    \"co1_country_code\": \"+1\",\n    \"co1_phone\": \"5551234567\",\n    \"co1_email\": \"jane.smith@medical.edu\",\n    \"co_presenter_1_bio\": \"Prof. Jane Smith specializes in medical AI applications.\",\n    \"co2_title\": \"Dr.\",\n    \"co2_name\": \"Mike Johnson\",\n    \"co2_work\": \"Tech Solutions Inc.\",\n    \"co2_country_code\": \"+44\",\n    \"co2_phone\": \"2071234567\",\n    \"co2_email\": \"mike.johnson@techsolutions.com\",\n    \"co_presenter_2_bio\": \"Dr. Mike Johnson is an expert in healthcare technology implementation.\",\n    \"pr3_bio\": \"Additional presenter bio information.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/ainet2025ppf",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"ainet2025ppf"
							]
						},
						"description": "Submit PPF with full data including co-presenters"
					},
					"response": []
				},
				{
					"name": "Submit PPF - Minimal Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"main_title\": \"Dr.\",\n    \"main_name\": \"Alice Brown\",\n    \"main_work\": \"Research Institute\",\n    \"presenter_main_country_code\": \"+91\",\n    \"main_phone\": \"9123456789\",\n    \"presenter_main_email\": \"alice.brown@research.edu\",\n    \"pr_area\": \"Data Science\",\n    \"pr_nature\": \"Case Study\",\n    \"pr_abstract\": \"A comprehensive case study on data science applications in business analytics.\",\n    \"presenter_bio\": \"Alice Brown is a data scientist with expertise in business analytics.\",\n    \"pr_title\": \"Data Science in Business: A Case Study Approach\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/ainet2025ppf",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"ainet2025ppf"
							]
						},
						"description": "Submit PPF with only required fields"
					},
					"response": []
				},
				{
					"name": "Submit PPF - Validation Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Response has error status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(false);",
									"});",
									"",
									"pm.test('Response contains validation errors', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"main_title\": \"Dr.\",\n    \"main_name\": \"\",\n    \"main_work\": \"\",\n    \"presenter_main_country_code\": \"\",\n    \"main_phone\": \"\",\n    \"presenter_main_email\": \"invalid-email\",\n    \"pr_area\": \"\",\n    \"pr_nature\": \"\",\n    \"pr_abstract\": \"\",\n    \"presenter_bio\": \"\",\n    \"pr_title\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/ainet2025ppf",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"ainet2025ppf"
							]
						},
						"description": "Test validation errors with missing required fields and invalid email"
					},
					"response": []
				}
			],
			"description": "Paper Presentation Form endpoints"
		},
		{
			"name": "DRF (Delegation Registration Form)",
			"item": [
				{
					"name": "Submit DRF - API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains ID', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"});",
									"",
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"you_are_register_as\": \"Individual\",\n    \"pre_title\": \"Dr.\",\n    \"member\": \"Yes\",\n    \"name\": \"Sarah Wilson\",\n    \"gender\": \"Female\",\n    \"age\": 35,\n    \"institution\": \"Global Research Institute\",\n    \"address\": \"123 Research Avenue\",\n    \"city\": \"Mumbai\",\n    \"pincode\": \"400001\",\n    \"state\": \"Maharashtra\",\n    \"country_code\": \"+91\",\n    \"phone_no\": \"9876543210\",\n    \"email\": \"sarah.wilson@research.edu\",\n    \"areas\": [\"Technology\", \"Healthcare\", \"Other\"],\n    \"other\": \"Environmental Science\",\n    \"experience\": \"5-10 years\",\n    \"conference\": \"Yes\",\n    \"types\": [\"Workshop\", \"Panel Discussion\", \"Networking\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/ainet2020drf",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"ainet2020drf"
							]
						},
						"description": "Submit DRF with full data including areas and conference preferences"
					},
					"response": []
				},
				{
					"name": "Submit DRF - Minimal Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"you_are_register_as\": \"Student\",\n    \"pre_title\": \"Mr.\",\n    \"member\": \"No\",\n    \"name\": \"David Lee\",\n    \"gender\": \"Male\",\n    \"age\": 25,\n    \"institution\": \"Tech University\",\n    \"address\": \"456 Student Street\",\n    \"city\": \"Delhi\",\n    \"pincode\": \"110001\",\n    \"state\": \"Delhi\",\n    \"country_code\": \"+91\",\n    \"phone_no\": \"9123456789\",\n    \"email\": \"david.lee@techuniv.edu\",\n    \"conference\": \"No\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/ainet2020drf",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"ainet2020drf"
							]
						},
						"description": "Submit DRF with only required fields"
					},
					"response": []
				},
				{
					"name": "Submit DRF - Validation Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Response has error status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(false);",
									"});",
									"",
									"pm.test('Response contains validation errors', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"you_are_register_as\": \"\",\n    \"pre_title\": \"\",\n    \"member\": \"\",\n    \"name\": \"\",\n    \"gender\": \"\",\n    \"age\": \"invalid\",\n    \"institution\": \"\",\n    \"address\": \"\",\n    \"city\": \"\",\n    \"pincode\": \"\",\n    \"state\": \"\",\n    \"country_code\": \"\",\n    \"phone_no\": \"\",\n    \"email\": \"invalid-email\",\n    \"conference\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/ainet2020drf",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"ainet2020drf"
							]
						},
						"description": "Test validation errors with missing required fields and invalid data"
					},
					"response": []
				}
			],
			"description": "Delegation Registration Form endpoints"
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Check User by Membership ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains exists field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('exists');",
									"});",
									"",
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"membership_id\": \"M12345\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/check-user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"check-user"
							]
						},
						"description": "Check if user exists by membership ID"
					},
					"response": []
				},
				{
					"name": "Check User - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User does not exist', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.exists).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"membership_id\": \"INVALID123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/check-user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"check-user"
							]
						},
						"description": "Test with non-existent membership ID"
					},
					"response": []
				},
				{
					"name": "Check User - Validation Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Response has error status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/check-user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"check-user"
							]
						},
						"description": "Test validation error with missing membership_id"
					},
					"response": []
				}
			],
			"description": "User management endpoints"
		},
		{
			"name": "Admin Authentication",
			"item": [
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains access token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('access_token');",
									"});",
									"",
									"pm.test('Response contains user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"});",
									"",
									"// Store token for other requests",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('admin_token', jsonData.data.access_token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@ainet.com\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"login"
							]
						},
						"description": "Admin login to get access token"
					},
					"response": []
				},
				{
					"name": "Admin Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains user profile', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"profile"
							]
						},
						"description": "Get admin profile (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Admin Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains new access token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('access_token');",
									"});",
									"",
									"// Update token for other requests",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('admin_token', jsonData.data.access_token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/refresh-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"refresh-token"
							]
						},
						"description": "Refresh admin access token (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Admin Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"// Clear token after logout",
									"pm.environment.unset('admin_token');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"logout"
							]
						},
						"description": "Admin logout and revoke all tokens (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Admin Login - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Response has error status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"wrong@email.com\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"login"
							]
						},
						"description": "Test admin login with invalid credentials"
					},
					"response": []
				},
				{
					"name": "Admin Login - Validation Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Response has error status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(false);",
									"});",
									"",
									"pm.test('Response contains validation errors', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"invalid-email\",\n    \"password\": \"123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"login"
							]
						},
						"description": "Test admin login validation errors"
					},
					"response": []
				}
			],
			"description": "Admin authentication and management endpoints"
		},
		{
			"name": "Admin DRF Management",
			"item": [
				{
					"name": "Get DRF List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains DRF records', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('drfs');",
									"    pm.expect(jsonData.data).to.have.property('pagination');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/drf?per_page=10&search=&sort_by=created_at&sort_order=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"drf"
							],
							"query": [
								{
									"key": "per_page",
									"value": "10"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort_by",
									"value": "created_at"
								},
								{
									"key": "sort_order",
									"value": "desc"
								}
							]
						},
						"description": "Get paginated list of DRF records with search and sorting"
					},
					"response": []
				},
				{
					"name": "Get DRF Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains DRF record', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('drf');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/drf/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"drf",
								"1"
							]
						},
						"description": "Get single DRF record by ID"
					},
					"response": []
				},
				{
					"name": "Update DRF Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains updated DRF record', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('drf');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Name\",\n    \"email\": \"updated@example.com\",\n    \"institution\": \"Updated Institution\",\n    \"member\": \"Yes\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/drf/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"drf",
								"1"
							]
						},
						"description": "Update DRF record with partial data"
					},
					"response": []
				},
				{
					"name": "Delete DRF Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains deletion confirmation', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/drf/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"drf",
								"1"
							]
						},
						"description": "Delete single DRF record"
					},
					"response": []
				},
				{
					"name": "Bulk Delete DRF Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains deletion count', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('deleted_count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ids\": [1, 2, 3]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/drf/bulk",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"drf",
								"bulk"
							]
						},
						"description": "Delete multiple DRF records by IDs"
					},
					"response": []
				},
				{
					"name": "Get DRF Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains statistics', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('stats');",
									"    pm.expect(jsonData.data.stats).to.have.property('total_drfs');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/drf/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"drf",
								"stats"
							]
						},
						"description": "Get DRF statistics and analytics"
					},
					"response": []
				},
				{
                    "name": "Export DRF CSV",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "text/csv"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{admin_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/client/admin/drf/export?start_date=2025-07-01&end_date=2025-07-31&search=",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "client",
                                "admin",
                                "drf",
                                "export"
                            ],
                            "query": [
                                { "key": "start_date", "value": "2025-07-01" },
                                { "key": "end_date", "value": "2025-07-31" },
                                { "key": "search", "value": "" },
                                { "key": "sort_by", "value": "created_at" },
                                { "key": "sort_order", "value": "desc" }
                            ]
                        },
                        "description": "Export DRF data as CSV with optional filters"
                    },
                    "response": []
                },
                {
					"name": "Search DRF Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/drf?search=John&per_page=5&sort_by=name&sort_order=asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"drf"
							],
							"query": [
								{
									"key": "search",
									"value": "John"
								},
								{
									"key": "per_page",
									"value": "5"
								},
								{
									"key": "sort_by",
									"value": "name"
								},
								{
									"key": "sort_order",
									"value": "asc"
								}
							]
						},
						"description": "Search DRF records by name, email, institution, or member status"
					},
					"response": []
				}
			],
			"description": "Admin DRF management and CRUD operations"
		},
		{
			"name": "Admin PPF Management",
			"item": [
				{
					"name": "Get PPF List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains PPF records', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('ppfs');",
									"    pm.expect(jsonData.data).to.have.property('pagination');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/ppf?per_page=10&search=&sort_by=created_at&sort_order=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"ppf"
							],
							"query": [
								{
									"key": "per_page",
									"value": "10"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort_by",
									"value": "created_at"
								},
								{
									"key": "sort_order",
									"value": "desc"
								}
							]
						},
						"description": "Get paginated list of PPF records with search and sorting"
					},
					"response": []
				},
				{
					"name": "Get PPF Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains PPF record', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('ppf');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/ppf/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"ppf",
								"1"
							]
						},
						"description": "Get single PPF record by ID"
					},
					"response": []
				},
				{
					"name": "Update PPF Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains updated PPF record', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('ppf');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"main_name\": \"Updated Presenter Name\",\n    \"main_email\": \"updated@example.com\",\n    \"main_work\": \"Updated Institution\",\n    \"pr_title\": \"Updated Paper Title\",\n    \"sub_theme\": \"Updated Theme\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/ppf/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"ppf",
								"1"
							]
						},
						"description": "Update PPF record with partial data"
					},
					"response": []
				},
				{
					"name": "Delete PPF Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains deletion confirmation', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/ppf/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"ppf",
								"1"
							]
						},
						"description": "Delete single PPF record"
					},
					"response": []
				},
				{
					"name": "Bulk Delete PPF Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains deletion count', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('deleted_count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ids\": [1, 2, 3]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/ppf/bulk",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"ppf",
								"bulk"
							]
						},
						"description": "Delete multiple PPF records by IDs"
					},
					"response": []
				},
				{
					"name": "Get PPF Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains statistics', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('stats');",
									"    pm.expect(jsonData.data.stats).to.have.property('total_ppfs');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/ppf/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"ppf",
								"stats"
							]
						},
						"description": "Get PPF statistics and analytics"
					},
					"response": []
				},
				{
                    "name": "Export PPF CSV",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "text/csv"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{admin_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/client/admin/ppf/export?start_date=2025-07-01&end_date=2025-07-31&search=",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "client",
                                "admin",
                                "ppf",
                                "export"
                            ],
                            "query": [
                                { "key": "start_date", "value": "2025-07-01" },
                                { "key": "end_date", "value": "2025-07-31" },
                                { "key": "search", "value": "" },
                                { "key": "sort_by", "value": "created_at" },
                                { "key": "sort_order", "value": "desc" }
                            ]
                        },
                        "description": "Export PPF data as CSV with optional filters"
                    },
                    "response": []
                },
                {
					"name": "Search PPF Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/ppf?search=AI&per_page=5&sort_by=main_name&sort_order=asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"ppf"
							],
							"query": [
								{
									"key": "search",
									"value": "AI"
								},
								{
									"key": "per_page",
									"value": "5"
								},
								{
									"key": "sort_by",
									"value": "main_name"
								},
								{
									"key": "sort_order",
									"value": "asc"
								}
							]
						},
						"description": "Search PPF records by presenter name, email, institution, paper title, or theme"
					},
					"response": []
				}
			],
			"description": "Admin PPF management and CRUD operations"
		},
		{
			"name": "Admin User Management",
			"item": [
				{
					"name": "Get Users List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains users', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('users');",
									"    pm.expect(jsonData.data).to.have.property('pagination');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/users?per_page=10&search=&sort_by=created_at&sort_order=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"users"
							],
							"query": [
								{
									"key": "per_page",
									"value": "10"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort_by",
									"value": "created_at"
								},
								{
									"key": "sort_order",
									"value": "desc"
								}
							]
						},
						"description": "Get paginated list of users with search and sorting"
					},
					"response": []
				},
				{
					"name": "Get User Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains user', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"users",
								"1"
							]
						},
						"description": "Get single user by ID"
					},
					"response": []
				},
				{
					"name": "Create New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains created user', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"password123\",\n    \"mobile\": \"+1234567890\",\n    \"gender\": \"Male\",\n    \"m_id\": \"MH000999\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"dob\": \"1990-01-01\",\n    \"address\": \"123 Main St\",\n    \"state\": \"California\",\n    \"district\": \"Los Angeles\",\n    \"membership_type\": \"Individual\",\n    \"membership_plan\": \"Premium\",\n    \"title\": \"Dr.\",\n    \"name_institution\": \"University of California\",\n    \"type_institution\": \"University\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"users"
							]
						},
						"description": "Create a new user account"
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains updated user', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"mobile\": \"+1234567891\",\n    \"state\": \"New York\",\n    \"membership_type\": \"Corporate\",\n    \"membership_plan\": \"Enterprise\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"users",
								"1"
							]
						},
						"description": "Update user information"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains deletion confirmation', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"users",
								"1"
							]
						},
						"description": "Delete single user account"
					},
					"response": []
				},
				{
					"name": "Bulk Delete Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains deletion count', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('deleted_count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ids\": [1, 2, 3]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/users/bulk",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"users",
								"bulk"
							]
						},
						"description": "Delete multiple users by IDs"
					},
					"response": []
				},
				{
					"name": "Get User Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains statistics', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('stats');",
									"    pm.expect(jsonData.data.stats).to.have.property('total_users');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/users/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"users",
								"stats"
							]
						},
						"description": "Get user statistics and analytics"
					},
					"response": []
				},
				{
					"name": "Search Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/users?search=john&per_page=5&sort_by=name&sort_order=asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"users"
							],
							"query": [
								{
									"key": "search",
									"value": "john"
								},
								{
									"key": "per_page",
									"value": "5"
								},
								{
									"key": "sort_by",
									"value": "name"
								},
								{
									"key": "sort_order",
									"value": "asc"
								}
							]
						},
						"description": "Search users by name, email, mobile, membership ID, or institution"
					},
					"response": []
				},
				{
					"name": "Create User - Validation Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Response has error status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"email\": \"invalid-email\",\n    \"password\": \"123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"users"
							]
						},
						"description": "Test user creation validation errors"
					},
					"response": []
				}
			],
			"description": "Admin user management and CRUD operations"
		},
		{
			"name": "Admin Users (role_id = 1)",
			"item": [
				{
					"name": "Get Admin Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains admin users', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('users');",
									"    pm.expect(jsonData.data).to.have.property('pagination');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/admin-users?per_page=10&search=&sort_by=name&sort_order=asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"admin-users"
							],
							"query": [
								{
									"key": "per_page",
									"value": "10"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort_by",
									"value": "name"
								},
								{
									"key": "sort_order",
									"value": "asc"
								}
							]
						},
						"description": "Get paginated list of users with role_id = 1 (Admin users)"
					},
					"response": []
				},
				{
					"name": "Get Admin Users List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains admin users list', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('admin_users');",
									"    pm.expect(jsonData.data).to.have.property('total_count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/admin-users/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"admin-users",
								"list"
							]
						},
						"description": "Get simple list of all users with role_id = 1 (Admin users)"
					},
					"response": []
				},
				{
					"name": "Search Admin Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/admin-users?search=admin&per_page=5&sort_by=created_at&sort_order=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"admin-users"
							],
							"query": [
								{
									"key": "search",
									"value": "admin"
								},
								{
									"key": "per_page",
									"value": "5"
								},
								{
									"key": "sort_by",
									"value": "created_at"
								},
								{
									"key": "sort_order",
									"value": "desc"
								}
							]
						},
						"description": "Search admin users by name, email, or mobile"
					},
					"response": []
				}
			],
			"description": "Get users with role_id = 1 (Admin users)"
		},
		{
			"name": "Admin Blog Management",
			"item": [
				{
					"name": "Get Blogs List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains blogs', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('blogs');",
									"    pm.expect(jsonData.data).to.have.property('pagination');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/blogs?per_page=10&search=&status=&category=&sort_by=created_at&sort_order=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"blogs"
							],
							"query": [
								{
									"key": "per_page",
									"value": "10"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								},
								{
									"key": "category",
									"value": ""
								},
								{
									"key": "sort_by",
									"value": "created_at"
								},
								{
									"key": "sort_order",
									"value": "desc"
								}
							]
						},
						"description": "Get paginated list of blogs with search, filtering, and sorting"
					},
					"response": []
				},
				{
					"name": "Get Blog Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains blog', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('blog');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/blogs/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"blogs",
								"1"
							]
						},
						"description": "Get single blog by ID with author information"
					},
					"response": []
				},
				{
					"name": "Create New Blog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains created blog', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('blog');",
									"    pm.expect(jsonData.data.blog).to.have.property('slug');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Introduction to Artificial Intelligence\",\n    \"content\": \"<p>Artificial Intelligence (AI) is revolutionizing the way we live and work. In this comprehensive guide, we explore the fundamentals of AI, its applications, and future prospects.</p><p>AI encompasses machine learning, deep learning, natural language processing, and computer vision. These technologies are transforming industries from healthcare to finance.</p>\",\n    \"excerpt\": \"A comprehensive guide to understanding Artificial Intelligence, its applications, and future prospects in various industries.\",\n    \"featured_image\": \"https://example.com/images/ai-intro.jpg\",\n    \"status\": \"published\",\n    \"author_id\": 1,\n    \"meta_title\": \"AI Introduction - Complete Guide\",\n    \"meta_description\": \"Learn about Artificial Intelligence fundamentals, applications, and future trends in this comprehensive guide.\",\n    \"tags\": [\"Artificial Intelligence\", \"Machine Learning\", \"Technology\", \"Guide\"],\n    \"category\": \"Technology\",\n    \"is_featured\": true,\n    \"sort_order\": 1\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/blogs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"blogs"
							]
						},
						"description": "Create a new blog post with all fields"
					},
					"response": []
				},
				{
					"name": "Update Blog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains updated blog', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('blog');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Advanced Artificial Intelligence Techniques\",\n    \"status\": \"published\",\n    \"is_featured\": true,\n    \"category\": \"Advanced Technology\",\n    \"tags\": [\"AI\", \"Machine Learning\", \"Deep Learning\", \"Advanced\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/blogs/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"blogs",
								"1"
							]
						},
						"description": "Update blog information"
					},
					"response": []
				},
				{
					"name": "Delete Blog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains deletion confirmation', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/blogs/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"blogs",
								"1"
							]
						},
						"description": "Delete single blog post"
					},
					"response": []
				},
				{
					"name": "Bulk Delete Blogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains deletion count', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('deleted_count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ids\": [1, 2, 3]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/blogs/bulk",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"blogs",
								"bulk"
							]
						},
						"description": "Delete multiple blogs by IDs"
					},
					"response": []
				},
				{
					"name": "Get Blog Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});",
									"",
									"pm.test('Response contains statistics', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('stats');",
									"    pm.expect(jsonData.data.stats).to.have.property('total_blogs');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/blogs/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"blogs",
								"stats"
							]
						},
						"description": "Get blog statistics and analytics"
					},
					"response": []
				},
				{
					"name": "Search Blogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/blogs?search=AI&status=published&category=Technology&per_page=5&sort_by=views_count&sort_order=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"blogs"
							],
							"query": [
								{
									"key": "search",
									"value": "AI"
								},
								{
									"key": "status",
									"value": "published"
								},
								{
									"key": "category",
									"value": "Technology"
								},
								{
									"key": "per_page",
									"value": "5"
								},
								{
									"key": "sort_by",
									"value": "views_count"
								},
								{
									"key": "sort_order",
									"value": "desc"
								}
							]
						},
						"description": "Search and filter blogs with advanced parameters"
					},
					"response": []
				},
				{
					"name": "Create Blog - Validation Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Response has error status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"\",\n    \"content\": \"\",\n    \"status\": \"invalid-status\",\n    \"author_id\": 99999\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/client/admin/blogs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"admin",
								"blogs"
							]
						},
						"description": "Test blog creation validation errors"
					},
					"response": []
				}
			],
			"description": "Admin blog management and CRUD operations"
		},
		{
			"name": "Test Endpoints",
			"item": [
				{
					"name": "API Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('API is working', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/client/test",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"test"
							]
						},
						"description": "Test if API is working"
					},
					"response": []
				}
			],
			"description": "General test endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}
